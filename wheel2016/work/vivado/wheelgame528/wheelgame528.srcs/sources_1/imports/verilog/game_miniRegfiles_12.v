/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_miniRegfiles_12 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [15:0] level,
    output reg [15:0] randA,
    output reg [15:0] randB
  );
  
  
  
  reg [15:0] M_level_reg_d, M_level_reg_q = 1'h0;
  reg [15:0] M_inpoperator_reg_d, M_inpoperator_reg_q = 1'h0;
  reg [15:0] M_randA_reg_d, M_randA_reg_q = 1'h0;
  reg [15:0] M_randB_reg_d, M_randB_reg_q = 1'h0;
  reg [15:0] M_correctAns_reg_d, M_correctAns_reg_q = 1'h0;
  reg [15:0] M_userAns_reg_d, M_userAns_reg_q = 1'h0;
  reg [15:0] M_temp_reg_d, M_temp_reg_q = 1'h0;
  
  always @* begin
    M_userAns_reg_d = M_userAns_reg_q;
    M_level_reg_d = M_level_reg_q;
    M_inpoperator_reg_d = M_inpoperator_reg_q;
    M_temp_reg_d = M_temp_reg_q;
    M_correctAns_reg_d = M_correctAns_reg_q;
    M_randB_reg_d = M_randB_reg_q;
    M_randA_reg_d = M_randA_reg_q;
    
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_randA_reg_d = data;
        end
        4'h1: begin
          M_randB_reg_d = data;
        end
        4'h2: begin
          M_correctAns_reg_d = data;
        end
        4'h3: begin
          M_userAns_reg_d = data;
        end
        4'h4: begin
          M_inpoperator_reg_d = data;
        end
        4'h5: begin
          M_level_reg_d = data;
        end
        4'h6: begin
          M_temp_reg_d = data;
        end
      endcase
    end
    
    case (read_address_a)
      4'h0: begin
        out_a = M_randA_reg_q;
      end
      4'h1: begin
        out_a = M_randB_reg_q;
      end
      4'h2: begin
        out_a = M_correctAns_reg_q;
      end
      4'h3: begin
        out_a = M_userAns_reg_q;
      end
      4'h4: begin
        out_a = M_inpoperator_reg_q;
      end
      4'h5: begin
        out_a = M_level_reg_q;
      end
      4'h6: begin
        out_a = M_temp_reg_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (read_address_b)
      4'h0: begin
        out_b = M_randA_reg_q;
      end
      4'h1: begin
        out_b = M_randB_reg_q;
      end
      4'h2: begin
        out_b = M_correctAns_reg_q;
      end
      4'h3: begin
        out_b = M_userAns_reg_q;
      end
      4'h4: begin
        out_b = M_inpoperator_reg_q;
      end
      4'h5: begin
        out_b = M_level_reg_q;
      end
      4'h6: begin
        out_b = M_temp_reg_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
    level = M_level_reg_q;
    randA = M_randA_reg_q;
    randB = M_randB_reg_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_level_reg_q <= 1'h0;
      M_inpoperator_reg_q <= 1'h0;
      M_randA_reg_q <= 1'h0;
      M_randB_reg_q <= 1'h0;
      M_correctAns_reg_q <= 1'h0;
      M_userAns_reg_q <= 1'h0;
      M_temp_reg_q <= 1'h0;
    end else begin
      M_level_reg_q <= M_level_reg_d;
      M_inpoperator_reg_q <= M_inpoperator_reg_d;
      M_randA_reg_q <= M_randA_reg_d;
      M_randB_reg_q <= M_randB_reg_d;
      M_correctAns_reg_q <= M_correctAns_reg_d;
      M_userAns_reg_q <= M_userAns_reg_d;
      M_temp_reg_q <= M_temp_reg_d;
    end
  end
  
endmodule
