/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_11 (
    input clk,
    input rst,
    input [15:0] regfile_datain,
    input reset_button,
    input select_button,
    output reg [5:0] alufn,
    output reg [0:0] wdsel,
    output reg [2:0] asel,
    output reg [1:0] alu_out_sel,
    output reg [3:0] regfile_write_address,
    output reg [3:0] regfile_read_address_a,
    output reg [3:0] regfile_read_address_b,
    output reg we_regfile
  );
  
  
  
  localparam START_game_fsm = 4'd0;
  localparam IDLE1_game_fsm = 4'd1;
  localparam IDLE2_game_fsm = 4'd2;
  localparam CHECK_ANS_game_fsm = 4'd3;
  localparam CORRECT_game_fsm = 4'd4;
  localparam WRONG_game_fsm = 4'd5;
  localparam WIN_game_fsm = 4'd6;
  localparam LOSE_game_fsm = 4'd7;
  localparam GAMEOVER_game_fsm = 4'd8;
  
  reg [3:0] M_game_fsm_d, M_game_fsm_q = START_game_fsm;
  
  wire [6-1:0] M_opTOalufn_ledalufn;
  reg [2-1:0] M_opTOalufn_opled;
  opTOalufn_24 opTOalufn (
    .opled(M_opTOalufn_opled),
    .ledalufn(M_opTOalufn_ledalufn)
  );
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    M_opTOalufn_opled = 1'h0;
    alufn = 1'h0;
    asel = 1'h0;
    we_regfile = 1'h0;
    regfile_write_address = 1'h0;
    regfile_read_address_a = 1'h0;
    regfile_read_address_b = 1'h0;
    alu_out_sel = 1'h0;
    wdsel = 1'h1;
    if (rst) begin
      M_game_fsm_d = START_game_fsm;
    end else begin
      
      case (M_game_fsm_q)
        START_game_fsm: begin
          asel = 2'h0;
          regfile_read_address_a = 4'h6;
          wdsel = 1'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h6;
          if (select_button == 1'h1) begin
            M_game_fsm_d = IDLE1_game_fsm;
          end else begin
            if (reset_button == 1'h1) begin
              M_game_fsm_d = START_game_fsm;
            end
          end
        end
        IDLE1_game_fsm: begin
          wdsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 1'h0;
          wdsel = 1'h1;
          we_regfile = 1'h1;
          regfile_write_address = 1'h1;
          if (select_button == 1'h1) begin
            we_regfile = 1'h1;
            regfile_write_address = 4'h4;
            M_game_fsm_d = IDLE2_game_fsm;
          end else begin
            if (reset_button == 1'h1) begin
              M_game_fsm_d = START_game_fsm;
            end else begin
              M_game_fsm_d = IDLE1_game_fsm;
            end
          end
        end
        IDLE2_game_fsm: begin
          alufn = M_opTOalufn_ledalufn;
          regfile_read_address_a = 4'h0;
          regfile_read_address_b = 4'h1;
          asel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          if (select_button == 1'h1) begin
            we_regfile = 1'h1;
            regfile_write_address = 4'h3;
            M_game_fsm_d = CHECK_ANS_game_fsm;
          end else begin
            if (reset_button == 1'h1) begin
              M_game_fsm_d = START_game_fsm;
            end else begin
              M_game_fsm_d = IDLE2_game_fsm;
            end
          end
        end
        CHECK_ANS_game_fsm: begin
          alufn = 6'h33;
          regfile_read_address_a = 4'h2;
          regfile_read_address_b = 4'h3;
          asel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h6;
          regfile_read_address_b = 4'h6;
          if (regfile_datain == 1'h1) begin
            M_game_fsm_d = CORRECT_game_fsm;
          end else begin
            if (~regfile_datain) begin
              M_game_fsm_d = WRONG_game_fsm;
            end else begin
              if (reset_button == 1'h1) begin
                M_game_fsm_d = START_game_fsm;
              end
            end
          end
        end
        CORRECT_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_b = 4'h5;
          asel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 5'h0a;
          regfile_read_address_b = 4'h6;
          if (~regfile_datain[3+0-:1] && regfile_datain[0+0-:1]) begin
            M_game_fsm_d = IDLE1_game_fsm;
          end else begin
            M_game_fsm_d = START_game_fsm;
          end
        end
        WRONG_game_fsm: begin
          if (reset_button == 1'h1) begin
            M_game_fsm_d = START_game_fsm;
          end
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_game_fsm_q <= 1'h0;
    end else begin
      M_game_fsm_q <= M_game_fsm_d;
    end
  end
  
endmodule
