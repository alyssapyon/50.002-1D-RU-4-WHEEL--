/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [36:0] wheelled,
    output reg [1:0] opled,
    output reg [7:0] led,
    output reg [6:0] display_level,
    output reg [13:0] display_randA,
    output reg [13:0] display_randB,
    input usb_rx,
    output reg usb_tx,
    input select_button,
    input reset_button
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_gameMachine_level;
  wire [16-1:0] M_gameMachine_randA;
  wire [16-1:0] M_gameMachine_randB;
  reg [1-1:0] M_gameMachine_reset_button;
  reg [1-1:0] M_gameMachine_select_button;
  game_miniBeta_1 gameMachine (
    .clk(clk),
    .rst(rst),
    .reset_button(M_gameMachine_reset_button),
    .select_button(M_gameMachine_select_button),
    .level(M_gameMachine_level),
    .randA(M_gameMachine_randA),
    .randB(M_gameMachine_randB)
  );
  wire [37-1:0] M_wheelLED_led;
  reg [1-1:0] M_wheelLED_select_button;
  reg [1-1:0] M_wheelLED_reset_button;
  wheelLED_2 wheelLED (
    .clk(clk),
    .rst(rst),
    .select_button(M_wheelLED_select_button),
    .reset_button(M_wheelLED_reset_button),
    .led(M_wheelLED_led)
  );
  wire [2-1:0] M_opLED_opled;
  reg [1-1:0] M_opLED_select_button;
  reg [1-1:0] M_opLED_reset_button;
  opLED_3 opLED (
    .clk(clk),
    .rst(rst),
    .select_button(M_opLED_select_button),
    .reset_button(M_opLED_reset_button),
    .opled(M_opLED_opled)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_4 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_dt_btn_p1_out;
  reg [1-1:0] M_edge_dt_btn_p1_in;
  edge_detector_5 edge_dt_btn_p1 (
    .clk(clk),
    .in(M_edge_dt_btn_p1_in),
    .out(M_edge_dt_btn_p1_out)
  );
  wire [1-1:0] M_edge_dt_btn_p2_out;
  reg [1-1:0] M_edge_dt_btn_p2_in;
  edge_detector_5 edge_dt_btn_p2 (
    .clk(clk),
    .in(M_edge_dt_btn_p2_in),
    .out(M_edge_dt_btn_p2_out)
  );
  wire [1-1:0] M_btn_cond_p1_out;
  reg [1-1:0] M_btn_cond_p1_in;
  button_conditioner_6 btn_cond_p1 (
    .clk(clk),
    .in(M_btn_cond_p1_in),
    .out(M_btn_cond_p1_out)
  );
  wire [1-1:0] M_btn_cond_p2_out;
  reg [1-1:0] M_btn_cond_p2_in;
  button_conditioner_6 btn_cond_p2 (
    .clk(clk),
    .in(M_btn_cond_p2_in),
    .out(M_btn_cond_p2_out)
  );
  
  wire [7-1:0] M_sevenseg_level_out;
  reg [16-1:0] M_sevenseg_level_level;
  sevenseg_level_7 sevenseg_level (
    .level(M_sevenseg_level_level),
    .out(M_sevenseg_level_out)
  );
  
  wire [14-1:0] M_sevenseg_randA_out;
  reg [16-1:0] M_sevenseg_randA_randA;
  sevenseg_randA_8 sevenseg_randA (
    .randA(M_sevenseg_randA_randA),
    .out(M_sevenseg_randA_out)
  );
  
  wire [14-1:0] M_sevenseg_randB_out;
  reg [16-1:0] M_sevenseg_randB_randB;
  sevenseg_randB_9 sevenseg_randB (
    .randB(M_sevenseg_randB_randB),
    .out(M_sevenseg_randB_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 1'h0;
    opled = 1'h0;
    wheelled = 1'h0;
    display_level = 1'h0;
    display_randA = 1'h0;
    display_randB = 1'h0;
    M_btn_cond_p1_in = select_button;
    M_btn_cond_p2_in = reset_button;
    M_edge_dt_btn_p1_in = M_btn_cond_p1_out;
    M_edge_dt_btn_p2_in = M_btn_cond_p2_out;
    M_gameMachine_select_button = M_edge_dt_btn_p1_out;
    M_gameMachine_reset_button = M_edge_dt_btn_p2_out;
    M_wheelLED_select_button = M_edge_dt_btn_p1_out;
    M_wheelLED_reset_button = M_edge_dt_btn_p2_out;
    M_opLED_select_button = M_edge_dt_btn_p1_out;
    M_opLED_reset_button = M_edge_dt_btn_p2_out;
    wheelled = M_wheelLED_led;
    opled = M_opLED_opled;
    M_sevenseg_level_level = M_gameMachine_level;
    display_level = M_sevenseg_level_out;
    M_sevenseg_randA_randA = M_gameMachine_randA;
    display_randA = M_sevenseg_randA_out;
    M_sevenseg_randB_randB = M_gameMachine_randB;
    display_randB = M_sevenseg_randB_out;
  end
endmodule
